Golang 101
--------------
Golang 101: Neden Go Öğrenmelisiniz ?
Bulut Bilişimine ilgi duyuyorsanız Go dilini öğrenmeli ve yapısına hakim olmalısınız.

Go dilinde yazılan uygulamalar oldukça çeşitlidir ve özellikle sistem programlama, ağ programlama, web geliştirme ve veritabanı programlama gibi alanlarda sıkça kullanılmaktadır. Örneğin:

Docker: Docker, konteyner tabanlı uygulama dağıtımı için popüler bir platformdur ve Go dilinde yazılmıştır.

Kubernetes: Kubernetes, konteyner orkestrasyonu için popüler bir açık kaynaklı platformdur ve Go dilinde yazılmıştır.

Etcd: Etcd, dağıtık key-value mağazası olarak kullanılan bir veritabanıdır ve Go dilinde yazılmıştır.

Hugo: Hugo, statik web siteleri oluşturmak için kullanılan açık kaynaklı bir araçtır ve Go dilinde yazılmıştır.

CockroachDB: CockroachDB, yüksek ölçeklenebilirlik sağlayan dağıtık bir SQL veritabanıdır ve Go dilinde yazılmıştır.

Prometheus: Prometheus, sistemlerin performans ve hata durumlarını izlemek için kullanılan açık kaynaklı bir araçtır ve Go dilinde yazılmıştır.

InfluxDB: InfluxDB, zaman serisi verilerini depolamak ve sorgulamak için kullanılan bir veritabanıdır ve Go dilinde yazılmıştır.

Moby: Moby, Docker'ın altında yatan bileşenleri içeren açık kaynaklı bir proje ve Go dilinde yazılmıştır.

Caddy: Caddy, hafif bir HTTP sunucusu ve ters proxydir ve Go dilinde yazılmıştır.

WireGuard: WireGuard, hızlı ve modern bir sanal özel ağ (VPN) çözümüdür ve Go dilinde yazılmıştır.

Minio:Minio Go dili ile yazılmış ve sektörde dosya yükleme, saklama, getirme işlemlerinde standart hale gelmiş S3 API'ları ile uyumlu çalışan bir servis olarak yer almaktadır.

Bu, sadece Go dilinde yazılmış bazı popüler uygulamaların örnekleri olup, Go dilinin diğer alanlarda da kullanıldığı unutulmamalıdır.

Go Bulut Bilişim için Önemli midir?
Go, özellikle bulut bilişim uygulamaları için tasarlanmış bir dil olduğundan, hızlı, verimli ve güvenilirdir. Ayrıca Go, çoklu işlem ve çoklu iş parçacığı desteği sayesinde, yüksek ölçeklenebilirlik sağlar.

Go dilinin bulut bilişimdeki önemi şu şekilde özetlenebilir:

Verimlilik: Go dilinde yazılan uygulamalar, C dilinde yazılan uygulamalara kıyasla daha hızlı ve daha verimlidir. Bu, bulut bilişim uygulamalarının daha hızlı ve daha düşük maliyetle çalışmasını sağlar.

Güvenilirlik: Go dilinde yazılan uygulamalar, güvenilirlikleriyle bilinirler. Go dilinin hatasız bellek yönetimi, hafıza sızıntılarına karşı koruma ve güvenlik özellikleri, bulut bilişim uygulamaları için önemlidir.

Ölçeklenebilirlik: Go dilinde yazılan uygulamalar, çoklu işlem ve çoklu iş parçacığı desteği sayesinde yüksek ölçeklenebilirlik sağlar. Bu, bulut bilişim uygulamalarının yüksek trafik ve yüksek işlem hacimleriyle başa çıkmasını sağlar.

Kolaylık: Go dilinde yazılan uygulamalar, yalın ve kolay anlaşılır bir dil yapısına sahiptir. Bu, geliştiricilerin daha hızlı ve daha kolay bir şekilde uygulama geliştirmelerini sağlar.

Bu nedenlerden dolayı, Go dilinin bulut bilişimdeki yeri oldukça önemlidir ve özellikle büyük ölçekli bulut bilişim uygulamaları için tercih edilen bir dil haline gelmiştir.
Golang ile Değişken Tanımlama
Bu senaryoda, Go programlama dilinde değişken tanımlamayı öğreneceğiz.

Go ile değişken tanımlamaya başlamadan önce, Go paketini kurmamız gerekiyor.
apk add go

Ve bir düzenleyici paketi,
apk add nano

Bu komut, Go ve nano paketini indirip kuracaktır.

İlk Egzersiz
Sayfaları oluşturuken "Vim Editörü" kullanacağız.
Kısayollara hızlı bir göz atalım.
(Not: Bu adımda isterseniz yüklediğimiz nano editörünü de kullanabilirsiniz)

:q = Eğer yapılan değişiklikler kaydedilmişse Vim editörünü kapatır. Aksi durumda uyarı verecektir.

:q! = Editörü kaydetmeden direk olarak kapatır.

:w = Yapılan değişiklikleri kaydeder.

:wq = Yapılan değişiklikleri kaydeder ve çıkar.

Ardından vim editöründe "hello.go" adlı ilk sayfayı oluşturalım.

vim hello.go
Açılan sayfada işlem yapabilmek için "i" harfine basarak "Insert Mode" u aktif hale getirelim ve sayfaya çalıştırmak istediğimiz kodu atalım.

Golang ile basit bir "Hello,World!" uygulaması yapalım

package main
import "fmt"
 
func main() {
    fmt.Println("Hello, World!")
    // İşlemi kaydedip hello.go 'dan çıkmak için "Esc" + ":" + "w" + "q" + "!" karakterlerine basıp "enter" diyelim
}
Ardından hello.go sayfasını çalıştıralım

go run hello.go
Doğru Çıktı : Hello, World!

Not:Eğer bu adımda "bash: go: command not found" hatası aldıysanız,Go'yu yüklemeyi tekrar denemelisiniz.
Şimdi devam edebiliriz.
2. Egzersiz
Yeni bir sayfa oluşturalım

variables.go

Aşağıdaki koda 1 değişken daha ekleyelim ve çalıştıralım.

package main
import "fmt"

func main() {

	// `var` 1 veya 1 den fazla değişkeni tanımlar
	var a = "başlangıç değeri "
	fmt.Println(a)

	// 1 seferde 1 den fazla değişken tanımlayabilirsiniz.
	var b, c int = 1, 2
	fmt.Println(b, c)

	// Go başlatılan değişkenlerin tipini algılar
	var d = true
	fmt.Println(d)

	// Değer atanmadan tanımlanan değişkenler 0 değerlidir
	var e int
	fmt.Println(e)

	// The `:=` syntax bir değişkene "initial" değeri vermek için kullanılır
	var f string = "elma"
	fmt.Println(f)

    // Aşağıda g değeri 10 olsun,fmt.Println() ile yukarıdaki örnekler gibi bastırılsın

}
Çalıştırmak için,

go run variables.go
Ekranda değişkenlerin çıktısını görüyorsak devam..
3. Egzersiz
Challenge Variables
Ekrana adınızı,soyadınızı,yaşınızı ve öğrenci olma durumunuzu yazdıran kodu yazınız.
ad -> string
soyad -> string
yaş -> integer
öğrenci mi-> boolean

Yeni bir sayfa oluşturalım. File->New file
isim ->
variables2.go

Örnek Kod:

package main
import "fmt"

func main() {
    age := 25
    name := "Alice"

    fmt.Println("Name:", name)
    fmt.Println("Age:", age)
}
Kodu yazalım, Çalıştıralım

go run variables2.go
Çıktı düzgünse başardınız demektir,Golang de değişken tanımlamak bu kadar kolay :)
Hands-on Go Programlama : Golang Veri Tipleri Öğrenin
Bu senaryoda, Go dilinde veri tiplerini öğreneceksiniz:

dizi(array)
slice
map
struct
İlk olarak ilgili paketleri yükleyelim
apk add go

Başla butonuna tıklayarak talimatlarla eğitime başlayabilirsiniz
Go Fonksiyonlarının Anlaşılması: Kod Örnekleri ile Bir Giriş
Go, Golang olarak da bilinen güçlü ve verimli bir programlama dilidir ve basitliği ile eş zamanlılık özellikleriyle tanınır. Go programlamasının temel yapı taşlarından biri fonksiyon kavramıdır. Bu makalede, Go fonksiyonlarının çeşitli yönlerini keşfedecek ve kullanımlarını göstermek için kod örnekleri sunacağız.

Fonksiyonların Tanımlanması Go'da bir fonksiyon, belirli bir görevi yerine getiren kod bloğudur. Bu görev, programın farklı bölümlerinden çağrılabilir. Bir fonksiyonun Go'da tanımlanma sözdizimi aşağıdaki gibidir:

func fonksiyonAdı(parametre1 tip1, parametre2 tip2) dönüşTipi {
    // Fonksiyon gövdesi
    // Çalıştırılacak kodlar
    return sonuç
}
Bir Go fonksiyonunun bileşenlerini inceleyelim:

func anahtar kelimesi: Fonksiyon tanımlamak için kullanılır. fonksiyonAdı: Bu, fonksiyonun tanımlayıcısıdır. Fonksiyonun amacını açıklayan anlamlı bir isim seçilmelidir. parametre1, parametre2: Bunlar fonksiyona giren parametrelerdir. Her parametre kendi tipini takip eder. dönüşTipi: Fonksiyonun döndürdüğü değerin tipini temsil eder. Eğer fonksiyon herhangi bir değer döndürmüyorsa, dönüşTipi belirtilmez. return: Bu anahtar kelime, fonksiyondan bir değer döndürmek için kullanılır. Fonksiyonun dönüş tipi olmadığı durumlarda return ifadesi opsiyoneldir.

Kod Örneği 1: Basit Bir Toplama Fonksiyonu
Toplama işlemini gerçekleştiren basit bir fonksiyon örneğiyle başlayalım:

İlk olarak,
main.go
adında bir go dosyası oluşturun
Kodu yazabilir ya da kopyalayabilirsiniz.

Not: Bu senaryoda tüm kodları main.go içinde test ediniz.

package main

import (
	"fmt"
)

func sayilariTopla(a, b int) int {
    return a + b
}

func main() {
	toplam := sayilariTopla(10, 20)

	fmt.Println("Toplam: ", toplam)
}
Daha sonra test etmek için
go run main.go
komutunu kullanın, test etmek istediğiniz diğer fonksiyonlar için aynı şekilde çalıştırınız.

Yukarıdaki kodda, iki tamsayı a ve b parametreleri alan sayilariTopla adında bir fonksiyon tanımlıyoruz. Fonksiyon, a ve b değerlerinin toplamını tamsayı olarak döndürüyor. Kodu test edebilir ve devam edebilirsiniz
Kod Örneği 3: Değişken Sayıda Argüman Alan Fonksiyon
Go, fonksiyonlara ... sözdizimi kullanarak değişken sayıda argüman geçme olanağı tanır. İşte birden fazla sayının ortalamasını hesaplayan bir fonksiyon örneği:

func ortalamaHesapla(sayilar ...float64) float64 {
    toplam := 0.0
    for _, sayi := range sayilar {
        toplam += sayi
    }
    return toplam / float64(len(sayilar))
}
Yukarıdaki ortalamaHesapla fonksiyonunda, sayilar parametresi ... ile başlar, bu da onun değişken sayıda ondalık sayı argümanını kabul edebileceğini belirtir. Fonksiyon, verilen tüm sayıların toplamını hesaplar ve ortalamasını döndürür.

Bu fonksiyonu yazın ve test edin:

package main

import (
	"fmt"
)

func ortalamaHesapla(sayilar ...float64) float64 {
    toplam := 0.0
    for _, sayi := range sayilar {
        toplam += sayi
    }
    return toplam / float64(len(sayilar))
}

func main() {
	ortalama := ortalamaHesapla(10.5, 7.2, 4.8, 9.1, 6.6)

	fmt.Println("Ortalama: ", ortalama)
-------------------------------------------------------------------------
Pointers
Pointers, Go programlama dilinde bir değişkenin bellek adresini tutan bir değişkendir. Pointers sayesinde, işaret edilen değişkenin değerine dolaylı olarak erişebilir ve değiştirebiliriz.

Pointer, bir değişkenin değerini bir fonksiyonda değiştirmemiz gerektiğinde veya büyük miktarda veriyi fonksiyona kopyalamadan aktarmak istediğimizde gibi birçok durumda faydalıdır.

Bir Pointer değişkeni tanımladığımızda, işaret etmek istediğimiz değişkenin türünden önce
*
operatörünü kullanırız. Örneğin, var ptr
*int
, ptr adında bir Pointers değişkeni tanımlar ve bu değişken bir tamsayı değişkeninin bellek adresini tutabilir.

İşaret edilen değişkenin değerine erişmek için, Pointers değişkeninin önüne
*
operatörünü kullanırız. Örneğin,
*ptr
, ptr tarafından işaret edilen tamsayı değişkeninin değerini döndürür.

Pointers kullanarak iki tam sayının yerini değiştirme
Bu senaryoda, Go dilinde pointer kullanarak iki tamsayı değişkeninin değerlerinin nasıl yer değiştirdiğini gösteriyoruz. İki tamsayı değişkeni tanımlar ve adreslerini,
*int
türündeki iki pointer argümanı alan bir fonksiyona geçiririz. Fonksiyon içinde, iki değişkenin değerlerini değiştirmek için pointerları kullanırız. Daha sonra, iki değişkenin adreslerini argüman olarak kullanarak fonksiyonu çağırırız. Son olarak, değişkenlerin değerlerini yazdırarak yerlerinin değişip değişmediğini doğrularız.

File -> New File
swap.go

package main

import "fmt"

func swap(x *int, y *int) {
temp := *x
*x = *y
*y = temp
}

func main() {
a := 10
b := 20
fmt.Println("Before swap: a =", a, ", b =", b)
swap(&a, &b)
fmt.Println("After swap: a =", a, ", b =", b)
}
Dosyanızı swap.go adında kaydedebilirsiniz, ve aşağıdaki komut yardımıyla çalıştırarak çıktısını gözlemleyebilirsiniz.

go run swap.goİnteger bir dizi için bellekte dinamik olarak yer ayırma işlemi
Go dilinde pointer kullanarak bir integer dizisi için bellekte dinamik olarak yer ayırmayı nasıl yapacağımızı inceleyelim. Bir integer değişkeni tanımlıyoruz ve değerini
*int
türünde bir pointer değişkenine atıyoruz. Daha sonra, make fonksiyonunu kullanarak integer dizisinin boyutunu integer değişkeni tarafından belirtilen bir bellek alanı için dinamik olarak ayırmaktayız.

Pointer değişkenine dizinin ilk öğesinin adresini atarız. Döngü kullanarak dizinin öğelerine değerler atarız. Son olarak, dizinin değerlerini yazdırarak atama işleminin doğru bir şekilde yapıldığını onaylayabiliriz.

File -> New File
pointers.go

adlı sayfayı oluşturalım.

package main

import "fmt"

func main() {
	size := 5
	ptr := new(*int)
	arr := make([]int, size)
	*ptr = &arr[0]

	for i := 0; i < size; i++ {
		arr[i] = i + 1
	}

	for i := 0; i < size; i++ {
		fmt.Println("arr[", i, "] =", arr[i])
	}

}
Dosyanızı pointers.go adında kaydedebilirsiniz, ve aşağıdaki komut yardımıyla çalıştırarak çıktısını gözlemleyebilirsiniz.

go run pointers.go
-------------------------------------------------------------------------------------------------------------------------

Go ile Concurrency(Eşzamanlılık) Kavramları
Go Dilindeki Eşzamanlılık, aynı anda veya eşzamanlı olarak birden fazla görevin yürütülmesine olanak sağlayan Go programlama dilinin bir programlama özelliğidir. Go'daki eşzamanlılık gorutinler ve kanallar aracılığıyla gerçekleştirilir.

gif2

Başla butonuna tıklayarak talimatlarla eğitime başlayabilirsiniz. 🚀
Adım 1: Go Eşzamanlılığını Anlama
Go, eşzamanlı programlama yapmayı kolaylaştıran bir dildir ve aynı anda birden fazla görevi gerçekleştirmenize olanak tanır. Go'da, eşzamanlılık, gorutinler ve kanallar kullanılarak elde edilir.

Goroutin
Goroutin ler, Go çalışma zamanı tarafından yönetilen hafif iş parçacıklarıdır. Her bir işlev için yeni bir iş parçacığı oluşturmadan fonksiyonları aynı anda yürütmeyi sağlarlar. Gorutinler, arka planda belirtilen işlevi çalıştıran go anahtar kelimesi kullanılarak oluşturulur.

Go paketini yükleyelim.
apk add go

Ardından yeni bir Go sayfası oluşturalım. dosya adı ->
goroutine.go

Gorutin oluşturmak için bir işlev tanımlayabilir ve go anahtar kelimesini kullanarak başlatabilirsiniz:

package main
import "fmt"

func sayHello() {
    fmt.Println("Hello, world!")
}

func main() {
    go sayHello() // start a new goroutine
    fmt.Println("Main function")
}
Kodu çalıştırıken ->
go run goroutine.go

"Hello, world!" mesajı, önceden başlatıldığı halde "Main Function" mesajından sonra yazdırılmaktadır. Bu, sayHello fonksiyonunun arka planda eşzamanlı olarak çalıştırılıyor olması nedeniyledir.
Go Dilinde Dosya İşlemleri: Kod Örnekleri ile Bir Giriş
Go, Golang olarak da bilinen güçlü ve verimli bir programlama dilidir ve kapsamlı bir standart kütüphane sunar. Bu kütüphane içerisinde dosya işlemleri için kapsamlı destek bulunmaktadır. Bu senaryoda, Go dilinde dosya işlemlerinin temellerini keşfedecek ve okuma, yazma ve dosyalarla çalışma konusunda nasıl kod örnekleri kullanılacağını göstereceğiz.

Dosyaların Açılması ve Okunması
Go dilinde, dosyaları açmak ve içeriğini okumak için os paketi kullanılır. os.Open() fonksiyonu bir dosyayı açmak için kullanılır ve ardından içeriği bir Reader ile okuyabilirsiniz.

İlk olarak bir text dosyası oluşturalım ->
ornek1.txt
İçine
Bulut Bilisim 2023
yazalım

Go sayfası oluşturun. Adı ->
file.go

Editöre kodu yapıştırın ve "dosyaismi.txt" kısmını yeniden isimlendirin->
sample.txt

package main

import (
    "fmt"
    "os"
)

func main() {
    dosya, hata := os.Open("dosyaismi.txt")
    if hata != nil {
        fmt.Println("Dosya açılırken hata oluştu:", hata)
        return
    }
    defer dosya.Close()

    veri := make([]byte, 100)
    sayac, hata := dosya.Read(veri)
    if hata != nil {
        fmt.Println("Dosya okunurken hata oluştu:", hata)
        return
    }

    fmt.Printf("Okunan %d byte: %s\n", sayac, veri[:sayac])
}
Kodu çalıştıralım
go run file.go

Not: ilk adımda go yüklenmediyse bu adımda hata alırsınız.

Yukarıdaki kodda, ornek.txt adlı bir dosya açıp, içeriğini bir byte dizisine okutup, okunan veriyi ekrana yazdırdınız.

root ~/workspace $ go run hello.go
Okunan 18 byte: Bulut Bilisim 2023
Buna benzer bir çıktı aldıysanız, devam edebilirsiniz
Dosyalara Yazma
Go dilinde verileri dosyaya yazmak için os.Create() fonksiyonu kullanılır. Bu fonksiyon, yeni bir dosya oluşturur veya varolan bir dosyanın içeriğini siler. Dosya elde edildiğinde, verileri bir Writer ile yazabilirsiniz.

Bu adımda Create ile yeni bir metin dosyası oluşturup içine veri yazalım. Yeni bir go sayfasını oluşturun ->
create.go

package main

import (
    "fmt"
    "os"
)

func main() {
    dosya, hata := os.Create("output.txt")
    if hata != nil {
        fmt.Println("Dosya oluşturulurken hata oluştu:", hata)
        return
    }
    defer dosya.Close()

    icerik := "Merhaba, bu dosyaya yazıldı!"
    _, hata = dosya.WriteString(icerik)
    if hata != nil {
        fmt.Println("Dosyaya yazılırken hata oluştu:", hata)
        return
    }

    fmt.Println("Veri başarıyla dosyaya yazıldı.")
}
Bu kodda, output.txt adında yeni bir dosya oluşturur ve içeriğe "Merhaba, bu dosyaya yazıldı!" yazısını yazar.

Bu çıktıyı alıyorsanız devam edebilirsiniz.

Dosya İşlemleri ve Değişiklikler
Go dilinde dosya işlemleriyle ilgili başka birçok fonksiyon da bulunmaktadır, bunlar arasında dosya adını değiştirme, dosya silme ve dosyanın var olup olmadığını kontrol etme gibi işlemler yer alır.
Son adımda bu işlemleri gerçekleştirelim.
İlk olarak 1 text dosyasını oluşturun ->
oldText.txt
,
içine random yazı yazıp çıkın

Go sayfasını olşturun ->
fileOperations.go

package main

import (
    "fmt"
    "os"
)

func main() {
    // Dosya adını değiştirme
    hata := os.Rename("oldText.txt", "newText.txt")
    if hata != nil {
        fmt.Println("Dosya adı değiştirilirken hata oluştu:", hata)
        return
    }
}
go run fileOperations.go

newText.txt oluşturulmuş mu kontrol edin ->
ls
komutu ile

Yeni go sayfasını olşturun ->
fileOperations2.go

Oluşturduğunuz yeni dosyayı sildirin,

package main

import (
    "fmt"
    "os"
)

func main() {

    // Dosya silme
    hata := os.Remove("newText.txt")
    if hata != nil {
        fmt.Println("Dosya silinirken hata oluştu:", hata)
        return
    }

    // Dosyanın var olup olmadığını kontrol etme
    if _, hata := os.Stat("newText.txt"); hata == nil {
        fmt.Println("Dosya mevcut.")
    } else {
        fmt.Println("Dosya mevcut değil.")
    }
}
go run fileOperations2.go

ls ile newText.txt dosyasının artık olmadığını kontrol edin.

Dosyayı sildindiyse harika ilerleme gopher!, devam edebilirsin.
Matris Nedir?
Bir matris, sayıların satır ve sütunlarda düzenlendiği iki boyutlu bir dizidir. Doğrusal cebirde kullanılan temel bir veri yapısıdır ve çeşitli bilimsel ve matematiksel hesaplamalarda yaygın olarak kullanılır.

Go'da Matrislerle Çalışmak
Go, matrislerle verimli bir şekilde çalışmak için çeşitli paketler ve kütüphaneler sağlar. Popüler bir kütüphane olan Gonum, sayısal hesaplamalar ve bilimsel hesaplama için geniş işlevsellikler sunar.

Go sayfası oluşturun. Adı
matrix.go
olmalı.

package main

import "fmt"

func main() {
    var i, j, rows, columns int

    var matrix [10][10]int
    var transposeMatrix [10][10]int

    fmt.Print("Matrisin satır ve sütun sayısını girin = ")
    fmt.Scan(&rows, &columns)

    fmt.Println("Transpoze etmek için Matris Elemanlarını Girin = ")
    for i = 0; i < rows; i++ {
        for j = 0; j < columns; j++ {
            fmt.Scan(&matrix[i][j])
        }
    }
    for i = 0; i < rows; i++ {
        for j = 0; j < columns; j++ {
            transposeMatrix[j][i] = matrix[i][j]
        }
    }
    fmt.Println("--- Transpoze Matris Elemanları ---")
    for i = 0; i < columns; i++ {
        for j = 0; j < rows; j++ {
            fmt.Print(transposeMatrix[i][j], "  ")
        }
        fmt.Println()
    }
}
Bu komutu yazın
go run matrix.go

Çıktınızı kontrol edin. Bir sonraki adımda, toplama, çıkarma ve çarpma gibi matris işlemlerini keşfedeceğiz.

Bir sonraki adıma ilerleyiniz.

Matris İşlemleri - Toplama ve Çıkarma
Bu adımda, Go'da matrisler üzerinde toplama ve çıkarma işlemlerini nasıl gerçekleştireceğimizi öğreneceğiz.

Matris ile Toplama
Matris toplaması, iki matrisin karşılık gelen elemanlarını birbirine ekleyerek gerçekleştirilir. Toplama işlemi yapılabilmesi için matrislerin aynı boyutlarda olması gerekmektedir.
matrix_addition.go
adında yeni bir sayfa oluşturun.

Ardından, aşağıdaki kodu yapıştırın veya editor ile yazın:

package main

import "fmt"

func main() {
    var i, j, rows, columns int

    var firstMat [10][10]int
    var secondMat [10][10]int
	var sumMat [10][10]int

    fmt.Print("Matrisin satır ve sütun sayısını girin = ")
    fmt.Scan(&rows, &columns)

    fmt.Println("Birinci Matris Elemanlarını Girin = ")
    for i = 0; i < rows; i++ {
        for j = 0; j < columns; j++ {
            fmt.Scan(&firstMat[i][j])
        }
    }
    fmt.Println("İkinci Matris Elemanlarını Girin = ")
    for i = 0; i < rows; i++ {
        for j = 0; j < columns; j++ {
            fmt.Scan(&secondMat[i][j])
        }
    }
  	for i = 0; i < rows; i++ {
        for j = 0; j < columns; j++ {
            sumMat[i][j]=firstMat[i][j]+secondMat[i][j]
        }
    }
	for i = 0; i < rows; i++ {
        for j = 0; j < columns; j++ {
        	    fmt.Print(sumMat[i][j], "  ")
        }
        fmt.Println()        
	}    	
}
Then run the code

go run matrix_addition.go

Matris ile Çıkarma
Matrislerde çıkarma, bir matrisin elemanlarından diğer matrisin karşılık gelen elemanları çıkarılarak gerçekleştirilir. Toplama işlemiyle olduğu gibi, matrislerin aynı boyutlarda olması gerekmektedir.

Kodu matris toplama işlemini, çıkarma işlemine çevirin ve test edin. Eğer matrislerin toplamını ve çıkarımını bulabiliyorsanız, devam edebilirsiniz...


Senaryo: Go Standard Kütüphanesini Kullanarak Basit Bir Web Sunucusu Oluşturma
İlk olarak Go paketini yükleyelim.

apk add go
Yeni bir dizin oluşturun ve Go projeniz dizine gidin:
mkdir go-webserver && cd go-webserver
main.go adında yeni bir dosya oluşturun:
main.go

main.go dosyasında, Go standart kütüphanesinden net/http paketini içe aktarın ve gelen istekleri işleyecek bir handler fonksiyonu tanımlayın:

4.Belirli bir bağlantı noktasında (bu durumda port 8080) sunucuyu başlatacak olan main fonksiyonunu tanımlayın:

package main

import (
    "fmt"
    "net/http"
)
func main() {
    http.HandleFunc("/", handler)
    http.ListenAndServe(":8080", nil)
}

func handler(w http.ResponseWriter, r *http.Request) {
    fmt.Fprintf(w, "Hello, World!")
}
main.go dosyasını kaydedin

main.go yu çalıştıralım.

go run main.go
go_port_icon.PNG

Sol taraftaki navbarda bulunan porta git ikonu ile 8080 adresine giderek "Merhaba, Dünya!" mesajını tarayıcınızda görüntüleyin. Tebrikler, Go standart kütüphanesi kullanarak basit bir web sunucusu başarıyla oluşturdunuz!
Go ie Test Yazma
İlk örnekte Golang kod tabanınızda, iki tamsayı alıp toplamını döndüren basit bir fonksiyon mevcut. Bu fonksiyon için birim testleri yazmak istiyorsunuz ve böylece fonksiyonun doğru çalıştığından emin olmak istiyorsunuz.

Aynı dizindeki fonksiyonunuzla birlikte function_test.go adında yeni bir dosya oluşturabilir ve Golang test paketini kullanarak fonksiyonunuzu test eden bir test fonksiyonu yazabilirsiniz.

Ardından yeni bir Go sayfası oluşturalım.
File -> New file
main.go

Yeni sayfa oluşturduktan sonra komut ekranına aşağıdaki kodu ekleyelim.

// main.go
package main

import (
	"fmt"
)

func main() {
	result := sum(2, 3)
	fmt.Println("Result:", result)
}

func sum(a, b int) int {
	return a + b
}
Ardından yeni bir Go sayfası daha oluşturalım.
File -> New file
main_test.go

// main_test.go
package main

import (
	"testing"
)

func TestSum(t *testing.T) {
	result := sum(2, 3)
	expected := 5
	if result != expected {
		t.Errorf("Expected %d, but got %d.", expected, result)
	}
}
Komutları sırasıyla çalıştıralım

go mod init main.go

go mod tidy

Bu örnekte, sum (toplam) fonksiyonunu test ediyoruz ve iki girdi için doğru değeri döndürdüğünü doğrulayalım.

root ~/workspace $ go test
PASS
ok main.go 0.002s